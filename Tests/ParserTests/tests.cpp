/*
-----------------File generated by testsGen.py-----------------
*/
#include <gtest/gtest.h>
#include <string>
#include <sstream>
#include "parser.h"

std::string fileToString(std::string name) {
    std::ifstream fout(name);
    std::stringstream sout;
    sout << fout.rdbuf();
    return sout.str();
}

TEST(ParserExprTests, test000) {
    Parser parser("test000.in");
    EXPECT_EQ(fileToString("test000.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test000.in");
}

TEST(ParserExprTests, test001) {
    Parser parser("test001.in");
    EXPECT_EQ(fileToString("test001.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test001.in");
}

TEST(ParserExprTests, test002) {
    Parser parser("test002.in");
    EXPECT_EQ(fileToString("test002.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test002.in");
}

TEST(ParserExprTests, test003) {
    Parser parser("test003.in");
    EXPECT_EQ(fileToString("test003.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test003.in");
}

TEST(ParserExprTests, test004) {
    Parser parser("test004.in");
    EXPECT_EQ(fileToString("test004.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test004.in");
}

TEST(ParserExprTests, test005) {
    Parser parser("test005.in");
    EXPECT_EQ(fileToString("test005.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test005.in");
}

TEST(ParserExprTests, test006) {
    Parser parser("test006.in");
    EXPECT_EQ(fileToString("test006.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test006.in");
}

TEST(ParserExprTests, test007) {
    Parser parser("test007.in");
    EXPECT_EQ(fileToString("test007.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test007.in");
}

TEST(ParserExprTests, test008) {
    Parser parser("test008.in");
    EXPECT_EQ(fileToString("test008.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test008.in");
}

TEST(ParserExprTests, test009) {
    Parser parser("test009.in");
    EXPECT_EQ(fileToString("test009.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test009.in");
}

TEST(ParserExprTests, test010) {
    Parser parser("test010.in");
    EXPECT_EQ(fileToString("test010.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test010.in");
}

TEST(ParserExprTests, test011) {
    Parser parser("test011.in");
    EXPECT_EQ(fileToString("test011.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test011.in");
}

TEST(ParserExprTests, test012) {
    Parser parser("test012.in");
    EXPECT_EQ(fileToString("test012.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test012.in");
}

TEST(ParserExprTests, test013) {
    Parser parser("test013.in");
    EXPECT_EQ(fileToString("test013.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test013.in");
}

TEST(ParserExprTests, test014) {
    Parser parser("test014.in");
    EXPECT_EQ(fileToString("test014.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test014.in");
}

TEST(ParserExprTests, test015) {
    Parser parser("test015.in");
    EXPECT_EQ(fileToString("test015.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test015.in");
}

TEST(ParserExprTests, test016) {
    Parser parser("test016.in");
    EXPECT_EQ(fileToString("test016.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test016.in");
}

TEST(ParserExprTests, test017) {
    Parser parser("test017.in");
    EXPECT_EQ(fileToString("test017.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test017.in");
}

TEST(ParserExprTests, test018) {
    Parser parser("test018.in");
    EXPECT_EQ(fileToString("test018.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test018.in");
}

TEST(ParserExprTests, test019) {
    Parser parser("test019.in");
    EXPECT_EQ(fileToString("test019.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test019.in");
}

TEST(ParserExprTests, test020) {
    Parser parser("test020.in");
    EXPECT_EQ(fileToString("test020.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test020.in");
}

TEST(ParserExprTests, test021) {
    Parser parser("test021.in");
    EXPECT_EQ(fileToString("test021.out"), parser.getTreeString()) << "Input: " << std::endl << fileToString("test021.in");
}

