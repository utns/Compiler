import os
import sys
maxTest = 68 
buildDir = "/home/nikita/Documents/C++/Compiler/build"
testsDir = "/home/nikita/Documents/C++/Compiler/Tests/GeneratorTests"

os.chdir(testsDir)
f = open('tests.cpp', 'w')

header = """/*
-----------------File generated by testsGen.py-----------------
*/
#include <gtest/gtest.h>
#include <string>
#include <sstream>
#include "parser.h"

std::string fileToString(std::string name) {
    std::ifstream fout(name);
    std::stringstream sout;
    sout << fout.rdbuf();
    return sout.str();
}

"""

f.write(header)

test = """TEST(ParserExprTests, {0}) {{
    EXPECT_EQ(fileToString("{1}"), fileToString("{2}")) << "Input: " << std::endl << fileToString("{3}");
}}

"""

for i in range(0, maxTest + 1):
    testIn = '{0}/test{1:03d}.in'.format(testsDir, i)
    testMyOut = "{0}/MyOut/test{1:03d}.out".format(testsDir, i)
    testOut = "{0}/test{1:03d}.out".format(testsDir, i)
    f.write(test.format('test{0:03d}'.format(i), testOut, testMyOut, testIn))

os.chdir(buildDir)
os.system("make")

for i in range(0, maxTest + 1):
    test =  'test{0:03d}'.format(i)
    testIn = '{0}/{1}.in'.format(testsDir, test)
    testMyOutAsm = "{0}/MyOut/{1}.asm".format(testsDir, test)
    testMyOutO = "{0}/MyOut/{1}.o".format(testsDir, test)
    testMyOut = "{0}/MyOut/{1}.out".format(testsDir, test)
    print(test)
    # print("./Compiler_run {} {}".format(testIn, testMyOut))
    os.system("./Compiler_run {} {}".format(testIn, testMyOutAsm))
    # print("nasm -felf64 {} && gcc {} && ./a.out > {}".format(testMyOutAsm, testMyOutO, testMyOut))
    os.system("nasm -felf64 {} && gcc {} && ./a.out > {}".format(testMyOutAsm, testMyOutO, testMyOut))

